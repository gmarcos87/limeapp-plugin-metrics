'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = undefined;

var _metricsConstants = require('./metricsConstants');

var initialState = {
  metrics: [],
  error: [],
  loading: false,
  status: ''
};

var reducer = exports.reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref = arguments[1];
  var type = _ref.type,
      payload = _ref.payload,
      meta = _ref.meta;

  switch (type) {
    case _metricsConstants.LOAD_METRICS:
      return Object.assign({}, initialState, { loading: true, status: 'metrics_status_gateway' });
    case _metricsConstants.LOAD_PATH:
      return Object.assign({}, state, { loading: true, metrics: [], status: 'metrics_status_path' });
    case _metricsConstants.LOAD_GATEWAY_SUCCESS:
      return Object.assign({}, state, { gateway: payload.gateway, status: 'metrics_status_path' });
    case _metricsConstants.LOAD_GATEWAY_NOT_FOUND:
      return Object.assign({}, state, { error: state.error.concat(payload.error), status: 'load_last_known_internet_path' });
    case _metricsConstants.LOAD_PATH_SUCCESS:
      var metrics = payload.map(function (x) {
        return { hostname: x, loading: true, error: false };
      });
      return Object.assign({}, state, { metrics: metrics, loading: true, status: 'metrics_status_stations' });
    case _metricsConstants.LOAD_PATH_NOT_FOUND:
      return Object.assign({}, state, { error: state.error.concat(payload.error), loading: false, status: '' });
    case _metricsConstants.LOAD_METRICS_SUCCESS:
      var newMetrics = state.metrics.map(function (x) {
        if (x.bandwidth < payload.bandwidth) {
          x.bandwidth = payload.bandwidth;
        }
        if (x.loss > payload.loss) {
          x.loss = payload.loss;
        }
        if (x.hostname !== payload.hostname) {
          return x;
        }
        x.loading = false;
        return Object.assign({}, x, payload);
      });
      var loadingStatus = newMetrics.filter(function (x) {
        return x.loading === true;
      }).length !== 0;
      return Object.assign({}, state, { metrics: newMetrics, loading: loadingStatus, status: 'metrics_status_stations' });
    case _metricsConstants.LOAD_METRICS_GATEWAY:
      return Object.assign({}, state, {
        metrics: state.metrics.map(function (x) {
          if (x.hostname !== payload.hostname) {
            return x;
          }
          x.loading = true;
          return Object.assign({}, x, payload);
        }),
        loading: true,
        status: 'metrics_status_stations'
      });
    case _metricsConstants.LOAD_METRICS_GATEWAY_SUCCESS:
      var newMetricsGateway = state.metrics.map(function (x) {
        if (x.hostname !== payload.hostname) {
          return x;
        }
        x.loading = false;
        return Object.assign({}, x, payload);
      });
      return Object.assign({}, state, { metrics: newMetricsGateway, loading: false });
    case _metricsConstants.LOAD_METRICS_ALL:
      return Object.assign({}, state, { metrics: state.metrics.map(function (x) {
          return Object.assign({}, x, { loading: true });
        }) });
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRyaWNzUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJtZXRyaWNzIiwiZXJyb3IiLCJsb2FkaW5nIiwic3RhdHVzIiwicmVkdWNlciIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2F0ZXdheSIsImNvbmNhdCIsIm1hcCIsImhvc3RuYW1lIiwieCIsIm5ld01ldHJpY3MiLCJiYW5kd2lkdGgiLCJsb3NzIiwibG9hZGluZ1N0YXR1cyIsImZpbHRlciIsImxlbmd0aCIsIm5ld01ldHJpY3NHYXRld2F5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBY0EsSUFBTUEsZUFBZTtBQUNuQkMsV0FBUyxFQURVO0FBRW5CQyxTQUFNLEVBRmE7QUFHbkJDLFdBQVMsS0FIVTtBQUluQkMsVUFBUTtBQUpXLENBQXJCOztBQU9PLElBQU1DLDRCQUFVLFNBQVZBLE9BQVUsR0FBbUQ7QUFBQSxNQUFsREMsS0FBa0QsdUVBQTFDTixZQUEwQztBQUFBO0FBQUEsTUFBMUJPLElBQTBCLFFBQTFCQSxJQUEwQjtBQUFBLE1BQXBCQyxPQUFvQixRQUFwQkEsT0FBb0I7QUFBQSxNQUFYQyxJQUFXLFFBQVhBLElBQVc7O0FBQ3hFLFVBQVFGLElBQVI7QUFDRTtBQUNFLGFBQU9HLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCWCxZQUFsQixFQUFnQyxFQUFDRyxTQUFRLElBQVQsRUFBZUMsUUFBTyx3QkFBdEIsRUFBaEMsQ0FBUDtBQUNGO0FBQ0UsYUFBT00sT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLEtBQWxCLEVBQXlCLEVBQUNILFNBQVEsSUFBVCxFQUFlRixTQUFRLEVBQXZCLEVBQTJCRyxRQUFPLHFCQUFsQyxFQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPTSxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsS0FBbEIsRUFBeUIsRUFBQ00sU0FBUUosUUFBUUksT0FBakIsRUFBMEJS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bEIsRUFBeUIsRUFBRUwsU0FBU3NCLGlCQUFYLEVBQThCcEIsU0FBUyxLQUF2QyxFQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPTyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsS0FBbEIsRUFBeUIsRUFBRUwsU0FBU0ssTUFBTUwsT0FBTixDQUFjYSxHQUFkLENBQWtCO0FBQUEsaUJBQUtKLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWlCSyxDQUFqQixFQUFvQixFQUFDYixTQUFTLElBQVYsRUFBcEIsQ0FBTDtBQUFBLFNBQWxCLENBQVgsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT0csS0FBUDtBQTVDSjtBQThDRCxDQS9DTSIsImZpbGUiOiJtZXRyaWNzUmVkdWNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIExPQURfTUVUUklDUyxcbiAgTE9BRF9NRVRSSUNTX1NVQ0NFU1MsXG4gIExPQURfUEFUSCxcbiAgTE9BRF9QQVRIX1NVQ0NFU1MsXG4gIExPQURfUEFUSF9OT1RfRk9VTkQsXG4gIExPQURfR0FURVdBWV9TVUNDRVNTLFxuICBMT0FEX0dBVEVXQVlfTk9UX0ZPVU5ELFxuICBMT0FEX01FVFJJQ1NfR0FURVdBWSxcbiAgTE9BRF9NRVRSSUNTX0dBVEVXQVlfU1VDQ0VTUyxcbiAgTE9BRF9NRVRSSUNTX0FMTFxufSBmcm9tICcuL21ldHJpY3NDb25zdGFudHMnO1xuXG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgbWV0cmljczogW10sXG4gIGVycm9yOltdLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgc3RhdHVzOiAnJ1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCwgbWV0YSB9KSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgTE9BRF9NRVRSSUNTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxTdGF0ZSwge2xvYWRpbmc6dHJ1ZSwgc3RhdHVzOidtZXRyaWNzX3N0YXR1c19nYXRld2F5J30pO1xuICAgIGNhc2UgTE9BRF9QQVRIOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7bG9hZGluZzp0cnVlLCBtZXRyaWNzOltdLCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3BhdGgnfSk7XG4gICAgY2FzZSBMT0FEX0dBVEVXQVlfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2dhdGV3YXk6cGF5bG9hZC5nYXRld2F5LCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3BhdGgnfSk7XG4gICAgY2FzZSBMT0FEX0dBVEVXQVlfTk9UX0ZPVU5EOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7ZXJyb3I6IHN0YXRlLmVycm9yLmNvbmNhdChwYXlsb2FkLmVycm9yKSwgc3RhdHVzOidsb2FkX2xhc3Rfa25vd25faW50ZXJuZXRfcGF0aCd9KTtcbiAgICBjYXNlIExPQURfUEFUSF9TVUNDRVNTOlxuICAgICAgbGV0IG1ldHJpY3MgPSBwYXlsb2FkLm1hcCh4ID0+ICh7aG9zdG5hbWU6eCwgbG9hZGluZzp0cnVlLCBlcnJvcjpmYWxzZX0pKTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge21ldHJpY3MsbG9hZGluZzp0cnVlLCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3N0YXRpb25zJ30pO1xuICAgIGNhc2UgTE9BRF9QQVRIX05PVF9GT1VORDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2Vycm9yOiBzdGF0ZS5lcnJvci5jb25jYXQocGF5bG9hZC5lcnJvciksIGxvYWRpbmc6IGZhbHNlLCBzdGF0dXM6Jyd9KTtcbiAgICBjYXNlIExPQURfTUVUUklDU19TVUNDRVNTOlxuICAgICAgbGV0IG5ld01ldHJpY3MgPSBzdGF0ZS5tZXRyaWNzLm1hcCh4ID0+IHtcbiAgICAgICAgaWYgKHguYmFuZHdpZHRoIDwgcGF5bG9hZC5iYW5kd2lkdGgpIHsgeC5iYW5kd2lkdGggPSBwYXlsb2FkLmJhbmR3aWR0aDsgfVxuICAgICAgICBpZiAoeC5sb3NzID4gcGF5bG9hZC5sb3NzKSB7IHgubG9zcyA9IHBheWxvYWQubG9zczsgfVxuICAgICAgICBpZiAoeC5ob3N0bmFtZSAhPT0gcGF5bG9hZC5ob3N0bmFtZSkgeyByZXR1cm4geDsgfVxuICAgICAgICB4LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHgsIHBheWxvYWQpO1xuICAgICAgfSk7XG4gICAgICBsZXQgbG9hZGluZ1N0YXR1cyA9IG5ld01ldHJpY3MuZmlsdGVyKHggPT4geC5sb2FkaW5nID09PSB0cnVlKS5sZW5ndGggIT09IDA7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgbWV0cmljczogbmV3TWV0cmljcywgbG9hZGluZzogbG9hZGluZ1N0YXR1cywgc3RhdHVzOidtZXRyaWNzX3N0YXR1c19zdGF0aW9ucycgfSk7XG4gICAgY2FzZSBMT0FEX01FVFJJQ1NfR0FURVdBWTpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICBtZXRyaWNzOiBzdGF0ZS5tZXRyaWNzLm1hcCh4ID0+IHtcbiAgICAgICAgICBpZiAoeC5ob3N0bmFtZSAhPT0gcGF5bG9hZC5ob3N0bmFtZSkgeyByZXR1cm4geDsgfVxuICAgICAgICAgIHgubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHgsIHBheWxvYWQpO1xuICAgICAgICB9KSxcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgc3RhdHVzOidtZXRyaWNzX3N0YXR1c19zdGF0aW9ucydcbiAgICAgIH0pO1xuICAgIGNhc2UgTE9BRF9NRVRSSUNTX0dBVEVXQVlfU1VDQ0VTUzpcbiAgICAgIGxldCBuZXdNZXRyaWNzR2F0ZXdheSA9IHN0YXRlLm1ldHJpY3MubWFwKHggPT4ge1xuICAgICAgICBpZiAoeC5ob3N0bmFtZSAhPT0gcGF5bG9hZC5ob3N0bmFtZSkgeyByZXR1cm4geDsgfVxuICAgICAgICB4LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHgsIHBheWxvYWQpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgbWV0cmljczogbmV3TWV0cmljc0dhdGV3YXksIGxvYWRpbmc6IGZhbHNlfSk7XG4gICAgY2FzZSBMT0FEX01FVFJJQ1NfQUxMOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IG1ldHJpY3M6IHN0YXRlLm1ldHJpY3MubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSx4LCB7bG9hZGluZzogdHJ1ZX0pKX0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07Il19