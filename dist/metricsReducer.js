'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = undefined;

var _metricsConstants = require('./metricsConstants');

var initialState = {
  metrics: [],
  error: [],
  loading: false,
  status: ''
};

var reducer = exports.reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref = arguments[1];
  var type = _ref.type,
      payload = _ref.payload,
      meta = _ref.meta;

  switch (type) {
    case _metricsConstants.LOAD_METRICS:
      return Object.assign({}, initialState, { loading: true, status: 'metrics_status_gateway' });
    case _metricsConstants.LOAD_PATH:
      return Object.assign({}, state, { loading: true, metrics: [], status: 'metrics_status_path' });
    case _metricsConstants.LOAD_GATEWAY_SUCCESS:
      return Object.assign({}, state, { gateway: payload.gateway, status: 'metrics_status_path' });
    case _metricsConstants.LOAD_GATEWAY_NOT_FOUND:
      return Object.assign({}, state, { error: state.error.concat(payload.error), status: 'load_last_known_internet_path' });
    case _metricsConstants.LOAD_PATH_SUCCESS:
      var metrics = payload.map(function (x) {
        return { hostname: x, loading: true, error: false };
      });
      return Object.assign({}, state, { metrics: metrics, loading: true, status: 'metrics_status_stations' });
    case _metricsConstants.LOAD_PATH_NOT_FOUND:
      return Object.assign({}, state, { error: state.error.concat(payload.error), loading: false, status: '' });
    case _metricsConstants.LOAD_METRICS_SUCCESS:
      var newMetrics = state.metrics.map(function (x) {
        if (x.hostname !== payload.hostname) {
          return x;
        }
        x.loading = false;
        return Object.assign({}, x, payload);
      });
      var loadingStatus = newMetrics.filter(function (x) {
        return x.loading === true;
      }).length !== 0;
      return Object.assign({}, state, { metrics: newMetrics, loading: loadingStatus, status: 'metrics_status_stations' });
    case _metricsConstants.LOAD_METRICS_GATEWAY:
      return Object.assign({}, state, {
        metrics: state.metrics.map(function (x) {
          if (x.hostname !== payload.hostname) {
            return x;
          }
          x.loading = true;
          return Object.assign({}, x, payload);
        }),
        loading: true,
        status: 'metrics_status_stations'
      });
    case _metricsConstants.LOAD_METRICS_GATEWAY_SUCCESS:
      var newMetricsGateway = state.metrics.map(function (x) {
        if (x.hostname !== payload.hostname) {
          return x;
        }
        x.loading = false;
        return Object.assign({}, x, payload);
      });
      return Object.assign({}, state, { metrics: newMetricsGateway, loading: false });
    case _metricsConstants.LOAD_METRICS_ALL:
      return Object.assign({}, state, { metrics: state.metrics.map(function (x) {
          return Object.assign({}, x, { loading: true });
        }) });
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRyaWNzUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJtZXRyaWNzIiwiZXJyb3IiLCJsb2FkaW5nIiwic3RhdHVzIiwicmVkdWNlciIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2F0ZXdheSIsImNvbmNhdCIsIm1hcCIsImhvc3RuYW1lIiwieCIsIm5ld01ldHJpY3MiLCJsb2FkaW5nU3RhdHVzIiwiZmlsdGVyIiwibGVuZ3RoIiwibmV3TWV0cmljc0dhdGV3YXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFjQSxJQUFNQSxlQUFlO0FBQ25CQyxXQUFTLEVBRFU7QUFFbkJDLFNBQU0sRUFGYTtBQUduQkMsV0FBUyxLQUhVO0FBSW5CQyxVQUFRO0FBSlcsQ0FBckI7O0FBT08sSUFBTUMsNEJBQVUsU0FBVkEsT0FBVSxHQUFtRDtBQUFBLE1BQWxEQyxLQUFrRCx1RUFBMUNOLFlBQTBDO0FBQUE7QUFBQSxNQUExQk8sSUFBMEIsUUFBMUJBLElBQTBCO0FBQUEsTUFBcEJDLE9BQW9CLFFBQXBCQSxPQUFvQjtBQUFBLE1BQVhDLElBQVcsUUFBWEEsSUFBVzs7QUFDeEUsVUFBUUYsSUFBUjtBQUNFO0FBQ0UsYUFBT0csT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JYLFlBQWxCLEVBQWdDLEVBQUNHLFNBQVEsSUFBVCxFQUFlQyxRQUFPLHdCQUF0QixFQUFoQyxDQUFQO0FBQ0Y7QUFDRSxhQUFPTSxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsS0FBbEIsRUFBeUIsRUFBQ0gsU0FBUSxJQUFULEVBQWVGLFNBQVEsRUFBdkIsRUFBMkJHLFFBQU8scUJBQWxDLEVBQXpCLENBQVA7QUFDRjtBQUNFLGFBQU9NLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxLQUFsQixFQUF5QixFQUFDTSxTQUFRSixRQUFRSSxPQUFqQixFQUEwQlIsUUFBTyxxQkFBakMsRUFBekIs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QixFQUFvQixFQUFDYixTQUFTLElBQVYsRUFBcEIsQ0FBTDtBQUFBLFNBQWxCLENBQVgsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT0csS0FBUDtBQTFDSjtBQTRDRCxDQTdDTSIsImZpbGUiOiJtZXRyaWNzUmVkdWNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIExPQURfTUVUUklDUyxcbiAgTE9BRF9NRVRSSUNTX1NVQ0NFU1MsXG4gIExPQURfUEFUSCxcbiAgTE9BRF9QQVRIX1NVQ0NFU1MsXG4gIExPQURfUEFUSF9OT1RfRk9VTkQsXG4gIExPQURfR0FURVdBWV9TVUNDRVNTLFxuICBMT0FEX0dBVEVXQVlfTk9UX0ZPVU5ELFxuICBMT0FEX01FVFJJQ1NfR0FURVdBWSxcbiAgTE9BRF9NRVRSSUNTX0dBVEVXQVlfU1VDQ0VTUyxcbiAgTE9BRF9NRVRSSUNTX0FMTFxufSBmcm9tICcuL21ldHJpY3NDb25zdGFudHMnO1xuXG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgbWV0cmljczogW10sXG4gIGVycm9yOltdLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgc3RhdHVzOiAnJ1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCwgbWV0YSB9KSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgTE9BRF9NRVRSSUNTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxTdGF0ZSwge2xvYWRpbmc6dHJ1ZSwgc3RhdHVzOidtZXRyaWNzX3N0YXR1c19nYXRld2F5J30pO1xuICAgIGNhc2UgTE9BRF9QQVRIOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7bG9hZGluZzp0cnVlLCBtZXRyaWNzOltdLCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3BhdGgnfSk7XG4gICAgY2FzZSBMT0FEX0dBVEVXQVlfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2dhdGV3YXk6cGF5bG9hZC5nYXRld2F5LCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3BhdGgnfSk7XG4gICAgY2FzZSBMT0FEX0dBVEVXQVlfTk9UX0ZPVU5EOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7ZXJyb3I6IHN0YXRlLmVycm9yLmNvbmNhdChwYXlsb2FkLmVycm9yKSwgc3RhdHVzOidsb2FkX2xhc3Rfa25vd25faW50ZXJuZXRfcGF0aCd9KTtcbiAgICBjYXNlIExPQURfUEFUSF9TVUNDRVNTOlxuICAgICAgbGV0IG1ldHJpY3MgPSBwYXlsb2FkLm1hcCh4ID0+ICh7aG9zdG5hbWU6eCwgbG9hZGluZzp0cnVlLCBlcnJvcjpmYWxzZX0pKTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge21ldHJpY3MsbG9hZGluZzp0cnVlLCBzdGF0dXM6J21ldHJpY3Nfc3RhdHVzX3N0YXRpb25zJ30pO1xuICAgIGNhc2UgTE9BRF9QQVRIX05PVF9GT1VORDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2Vycm9yOiBzdGF0ZS5lcnJvci5jb25jYXQocGF5bG9hZC5lcnJvciksIGxvYWRpbmc6IGZhbHNlLCBzdGF0dXM6Jyd9KTtcbiAgICBjYXNlIExPQURfTUVUUklDU19TVUNDRVNTOlxuICAgICAgbGV0IG5ld01ldHJpY3MgPSBzdGF0ZS5tZXRyaWNzLm1hcCh4ID0+IHtcbiAgICAgICAgaWYgKHguaG9zdG5hbWUgIT09IHBheWxvYWQuaG9zdG5hbWUpIHsgcmV0dXJuIHg7IH1cbiAgICAgICAgeC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB4LCBwYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGxvYWRpbmdTdGF0dXMgPSBuZXdNZXRyaWNzLmZpbHRlcih4ID0+IHgubG9hZGluZyA9PT0gdHJ1ZSkubGVuZ3RoICE9PSAwO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IG1ldHJpY3M6IG5ld01ldHJpY3MsIGxvYWRpbmc6IGxvYWRpbmdTdGF0dXMsIHN0YXR1czonbWV0cmljc19zdGF0dXNfc3RhdGlvbnMnIH0pO1xuICAgIGNhc2UgTE9BRF9NRVRSSUNTX0dBVEVXQVk6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgbWV0cmljczogc3RhdGUubWV0cmljcy5tYXAoeCA9PiB7XG4gICAgICAgICAgaWYgKHguaG9zdG5hbWUgIT09IHBheWxvYWQuaG9zdG5hbWUpIHsgcmV0dXJuIHg7IH1cbiAgICAgICAgICB4LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB4LCBwYXlsb2FkKTtcbiAgICAgICAgfSksXG4gICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgIHN0YXR1czonbWV0cmljc19zdGF0dXNfc3RhdGlvbnMnXG4gICAgICB9KTtcbiAgICBjYXNlIExPQURfTUVUUklDU19HQVRFV0FZX1NVQ0NFU1M6XG4gICAgICBsZXQgbmV3TWV0cmljc0dhdGV3YXkgPSBzdGF0ZS5tZXRyaWNzLm1hcCh4ID0+IHtcbiAgICAgICAgaWYgKHguaG9zdG5hbWUgIT09IHBheWxvYWQuaG9zdG5hbWUpIHsgcmV0dXJuIHg7IH1cbiAgICAgICAgeC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB4LCBwYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IG1ldHJpY3M6IG5ld01ldHJpY3NHYXRld2F5LCBsb2FkaW5nOiBmYWxzZX0pO1xuICAgIGNhc2UgTE9BRF9NRVRSSUNTX0FMTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBtZXRyaWNzOiBzdGF0ZS5tZXRyaWNzLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30seCwge2xvYWRpbmc6IHRydWV9KSl9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59OyJdfQ==