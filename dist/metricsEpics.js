'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metricsApi = require('./metricsApi');

var _metricsConstants = require('./metricsConstants');

require('rxjs/add/operator/concatMap');

require('rxjs/add/operator/mergeAll');

require('rxjs/add/operator/concatAll');

var loadGateway = function loadGateway(action$, store, _ref) {
  var wsAPI = _ref.wsAPI;
  return action$.ofType(_metricsConstants.LOAD_METRICS).mergeMap(function () {
    return (0, _metricsApi.getGateway)(wsAPI, store.getState().meta.sid);
  }).map(function (payload) {
    if (!payload.error) {
      return { type: _metricsConstants.LOAD_GATEWAY_SUCCESS, payload: payload };
    }
    return { type: _metricsConstants.LOAD_GATEWAY_NOT_FOUND, payload: payload };
  }).catch([{ type: _metricsConstants.LOAD_GATEWAY_ERROR }]);
};

var loadPath = function loadPath(action$, store, _ref2) {
  var wsAPI = _ref2.wsAPI;
  return action$.ofType(_metricsConstants.LOAD_GATEWAY_SUCCESS).mergeMap(function (action) {
    return (0, _metricsApi.getPath)(wsAPI, store.getState().meta.sid, { target: action.payload.gateway });
  }).map(function (payload) {
    if (!payload.error) {
      return { type: _metricsConstants.LOAD_PATH_SUCCESS, payload: payload };
    }
    return { type: _metricsConstants.LOAD_PATH_NOT_FOUND, payload: payload };
  }).catch([{ type: _metricsConstants.LOAD_PATH_ERROR }]);
};

var loadLastPath = function loadLastPath(action$, store, _ref3) {
  var wsAPI = _ref3.wsAPI;
  return action$.ofType(_metricsConstants.LOAD_GATEWAY_NOT_FOUND).mergeMap(function (action) {
    return (0, _metricsApi.getLastKnownPath)(wsAPI, store.getState().meta.sid, { target: action.payload.gateway });
  }).map(function (payload) {
    if (!payload.error) {
      return { type: _metricsConstants.LOAD_PATH_SUCCESS, payload: payload };
    }
    return { type: _metricsConstants.LOAD_PATH_NOT_FOUND, payload: payload };
  }).catch([{ type: _metricsConstants.LOAD_PATH_ERROR }]);
};

var loadMetrics = function loadMetrics(action$, store, _ref4) {
  var wsAPI = _ref4.wsAPI;
  return action$.ofType(_metricsConstants.LOAD_PATH_SUCCESS).map(function (action) {
    return action.payload;
  }).concatMap(function (paths) {
    return paths.map(function (path) {
      return (0, _metricsApi.getMetrics)(wsAPI, store.getState().meta.sid, { target: path });
    });
  }).concatAll().map(function (payload) {
    return { type: _metricsConstants.LOAD_METRICS_SUCCESS, payload: payload };
  });
};

exports.default = { loadGateway: loadGateway, loadPath: loadPath, loadMetrics: loadMetrics, loadLastPath: loadLastPath };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRyaWNzRXBpY3MuanMiXSwibmFtZXMiOlsibG9hZEdhdGV3YXkiLCJhY3Rpb24kIiwic3RvcmUiLCJ3c0FQSSIsIm9mVHlwZSIsIm1lcmdlTWFwIiwiZ2V0U3RhdGUiLCJtZXRhIiwic2lkIiwibWFwIiwicGF5bG9hZCIsImVycm9yIiwidHlwZSIsImNhdGNoIiwibG9hZFBhdGgiLCJhY3Rpb24iLCJ0YXJnZXQiLCJnYXRld2F5IiwibG9hZExhc3RQYXRoIiwibG9hZE1ldHJpY3MiLCJjb25jYXRNYXAiLCJwYXRocyIsInBhdGgiLCJjb25jYXRBbGwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQVdBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGNBQWMsU0FBZEEsV0FBYyxDQUFFQyxPQUFGLEVBQVdDLEtBQVg7QUFBQSxNQUFvQkMsS0FBcEIsUUFBb0JBLEtBQXBCO0FBQUEsU0FDbEJGLFFBQVFHLE1BQVIsaUNBQ0dDLFFBREgsQ0FDWTtBQUFBLFdBQUssNEJBQVdGLEtBQVgsRUFBaUJELE1BQU1JLFFBQU4sR0FBaUJDLElBQWpCLENBQXNCQyxHQUF2QyxDQUFMO0FBQUEsR0FEWixFQUVHQyxHQUZILENBRU8sbUJBQVc7QUFDZCxRQUFJLENBQUNDLFFBQVFDLEtBQWIsRUFBb0I7QUFDbEIsYUFBTyxFQUFDQyw0Q0FBRCxFQUE0QkYsZ0JBQTVCLEVBQVA7QUFDRDtBQUNELFdBQU8sRUFBQ0UsOENBQUQsRUFBOEJGLGdCQUE5QixFQUFQO0FBQ0QsR0FQSCxFQVFHRyxLQVJILENBUVMsQ0FBRSxFQUFDRCwwQ0FBRCxFQUFGLENBUlQsQ0FEa0I7QUFBQSxDQUFwQjs7QUFXQSxJQUFNRSxXQUFXLFNBQVhBLFFBQVcsQ0FBRWIsT0FBRixFQUFXQyxLQUFYO0FBQUEsTUFBb0JDLEtBQXBCLFNBQW9CQSxLQUFwQjtBQUFBLFNBQ2ZGLFFBQVFHLE1BQVIseUNBQ0tDLFFBREwsQ0FDYyxVQUFDVSxNQUFEO0FBQUEsV0FBVyx5QkFBUVosS0FBUixFQUFjRCxNQUFNSSxRQUFOLEdBQWlCQyxJQUFqQixDQUFzQkMsR0FBcEMsRUFBd0MsRUFBQ1EsUUFBT0QsT0FBT0wsT0FBUCxDQUFlTyxPQUF2QixFQUF4QyxDQUFYO0FBQUEsR0FEZCxFQUVLUixHQUZMLENBRVMsbUJBQVc7QUFDZCxRQUFJLENBQUNDLFFBQVFDLEtBQWIsRUFBb0I7QUFDbEIsYUFBTyxFQUFDQyx5Q0FBRCxFQUF5QkYsZ0JBQXpCLEVBQVA7QUFDRDtBQUNELFdBQU8sRUFBQ0UsMkNBQUQsRUFBMkJGLGdCQUEzQixFQUFQO0FBQ0QsR0FQTCxFQVFLRyxLQVJMLENBUVcsQ0FBRSxFQUFDRCx1Q0FBRCxFQUFGLENBUlgsQ0FEZTtBQUFBLENBQWpCOztBQVdBLElBQU1NLGVBQWUsU0FBZkEsWUFBZSxDQUFFakIsT0FBRixFQUFXQyxLQUFYO0FBQUEsTUFBb0JDLEtBQXBCLFNBQW9CQSxLQUFwQjtBQUFBLFNBQ25CRixRQUFRRyxNQUFSLDJDQUNLQyxRQURMLENBQ2MsVUFBQ1UsTUFBRDtBQUFBLFdBQVcsa0NBQWlCWixLQUFqQixFQUF1QkQsTUFBTUksUUFBTixHQUFpQkMsSUFBakIsQ0FBc0JDLEdBQTdDLEVBQWlELEVBQUNRLFFBQU9ELE9BQU9MLE9BQVAsQ0FBZU8sT0FBdkIsRUFBakQsQ0FBWDtBQUFBLEdBRGQsRUFFS1IsR0FGTCxDQUVTLG1CQUFXO0FBQ2QsUUFBSSxDQUFDQyxRQUFRQyxLQUFiLEVBQW9CO0FBQ2xCLGFBQU8sRUFBQ0MseUNBQUQsRUFBeUJGLGdCQUF6QixFQUFQO0FBQ0Q7QUFDRCxXQUFPLEVBQUNFLDJDQUFELEVBQTJCRixnQkFBM0IsRUFBUDtBQUNELEdBUEwsRUFRS0csS0FSTCxDQVFXLENBQUUsRUFBQ0QsdUNBQUQsRUFBRixDQVJYLENBRG1CO0FBQUEsQ0FBckI7O0FBV0EsSUFBTU8sY0FBYyxTQUFkQSxXQUFjLENBQUVsQixPQUFGLEVBQVdDLEtBQVg7QUFBQSxNQUFvQkMsS0FBcEIsU0FBb0JBLEtBQXBCO0FBQUEsU0FDaEJGLFFBQVFHLE1BQVIsc0NBQ0dLLEdBREgsQ0FDTztBQUFBLFdBQVVNLE9BQU9MLE9BQWpCO0FBQUEsR0FEUCxFQUVHVSxTQUZILENBRWE7QUFBQSxXQUFTQyxNQUFNWixHQUFOLENBQVUsVUFBQ2EsSUFBRDtBQUFBLGFBQVEsNEJBQVduQixLQUFYLEVBQWlCRCxNQUFNSSxRQUFOLEdBQWlCQyxJQUFqQixDQUFzQkMsR0FBdkMsRUFBMkMsRUFBQ1EsUUFBT00sSUFBUixFQUEzQyxDQUFSO0FBQUEsS0FBVixDQUFUO0FBQUEsR0FGYixFQUdHQyxTQUhILEdBSUdkLEdBSkgsQ0FJTztBQUFBLFdBQVksRUFBQ0csNENBQUQsRUFBNEJGLGdCQUE1QixFQUFaO0FBQUEsR0FKUCxDQURnQjtBQUFBLENBQXBCOztrQkFPZSxFQUFFVix3QkFBRixFQUFlYyxrQkFBZixFQUF5Qkssd0JBQXpCLEVBQXNDRCwwQkFBdEMsRSIsImZpbGUiOiJtZXRyaWNzRXBpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRQYXRoLCBnZXRHYXRld2F5LCBnZXRNZXRyaWNzLCBnZXRMYXN0S25vd25QYXRoIH0gZnJvbSAnLi9tZXRyaWNzQXBpJztcbmltcG9ydCB7XG4gIExPQURfR0FURVdBWV9TVUNDRVNTLFxuICBMT0FEX0dBVEVXQVlfRVJST1IsXG4gIExPQURfR0FURVdBWV9OT1RfRk9VTkQsXG4gIExPQURfUEFUSF9TVUNDRVNTLFxuICBMT0FEX1BBVEhfRVJST1IsXG4gIExPQURfUEFUSF9OT1RfRk9VTkQsXG4gIExPQURfTUVUUklDUyxcbiAgTE9BRF9NRVRSSUNTX1NVQ0NFU1Ncbn0gZnJvbSAnLi9tZXRyaWNzQ29uc3RhbnRzJztcblxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jb25jYXRNYXAnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tZXJnZUFsbCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdEFsbCc7XG5cbmNvbnN0IGxvYWRHYXRld2F5ID0gKCBhY3Rpb24kLCBzdG9yZSwgeyB3c0FQSSB9KSA9PlxuICBhY3Rpb24kLm9mVHlwZShMT0FEX01FVFJJQ1MpXG4gICAgLm1lcmdlTWFwKCgpPT4gZ2V0R2F0ZXdheSh3c0FQSSxzdG9yZS5nZXRTdGF0ZSgpLm1ldGEuc2lkLCkpXG4gICAgLm1hcChwYXlsb2FkID0+IHtcbiAgICAgIGlmICghcGF5bG9hZC5lcnJvcikge1xuICAgICAgICByZXR1cm4ge3R5cGU6TE9BRF9HQVRFV0FZX1NVQ0NFU1MsIHBheWxvYWR9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHt0eXBlOkxPQURfR0FURVdBWV9OT1RfRk9VTkQsIHBheWxvYWR9O1xuICAgIH0pXG4gICAgLmNhdGNoKFsoe3R5cGU6TE9BRF9HQVRFV0FZX0VSUk9SfSldKTtcblxuY29uc3QgbG9hZFBhdGggPSAoIGFjdGlvbiQsIHN0b3JlLCB7IHdzQVBJIH0pID0+XG4gIGFjdGlvbiQub2ZUeXBlKExPQURfR0FURVdBWV9TVUNDRVNTKVxuICAgICAgLm1lcmdlTWFwKChhY3Rpb24pPT4gZ2V0UGF0aCh3c0FQSSxzdG9yZS5nZXRTdGF0ZSgpLm1ldGEuc2lkLHt0YXJnZXQ6YWN0aW9uLnBheWxvYWQuZ2F0ZXdheX0pKVxuICAgICAgLm1hcChwYXlsb2FkID0+IHtcbiAgICAgICAgaWYgKCFwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHt0eXBlOkxPQURfUEFUSF9TVUNDRVNTLCBwYXlsb2FkfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3R5cGU6TE9BRF9QQVRIX05PVF9GT1VORCwgcGF5bG9hZH07XG4gICAgICB9KVxuICAgICAgLmNhdGNoKFsoe3R5cGU6TE9BRF9QQVRIX0VSUk9SfSldKTtcblxuY29uc3QgbG9hZExhc3RQYXRoID0gKCBhY3Rpb24kLCBzdG9yZSwgeyB3c0FQSSB9KSA9PlxuICBhY3Rpb24kLm9mVHlwZShMT0FEX0dBVEVXQVlfTk9UX0ZPVU5EKVxuICAgICAgLm1lcmdlTWFwKChhY3Rpb24pPT4gZ2V0TGFzdEtub3duUGF0aCh3c0FQSSxzdG9yZS5nZXRTdGF0ZSgpLm1ldGEuc2lkLHt0YXJnZXQ6YWN0aW9uLnBheWxvYWQuZ2F0ZXdheX0pKVxuICAgICAgLm1hcChwYXlsb2FkID0+IHtcbiAgICAgICAgaWYgKCFwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHt0eXBlOkxPQURfUEFUSF9TVUNDRVNTLCBwYXlsb2FkfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3R5cGU6TE9BRF9QQVRIX05PVF9GT1VORCwgcGF5bG9hZH07XG4gICAgICB9KVxuICAgICAgLmNhdGNoKFsoe3R5cGU6TE9BRF9QQVRIX0VSUk9SfSldKTtcblxuY29uc3QgbG9hZE1ldHJpY3MgPSAoIGFjdGlvbiQsIHN0b3JlLCB7IHdzQVBJIH0pID0+XG4gICAgYWN0aW9uJC5vZlR5cGUoTE9BRF9QQVRIX1NVQ0NFU1MpXG4gICAgICAubWFwKGFjdGlvbiA9PiBhY3Rpb24ucGF5bG9hZClcbiAgICAgIC5jb25jYXRNYXAocGF0aHMgPT4gcGF0aHMubWFwKChwYXRoKT0+Z2V0TWV0cmljcyh3c0FQSSxzdG9yZS5nZXRTdGF0ZSgpLm1ldGEuc2lkLHt0YXJnZXQ6cGF0aH0pKSlcbiAgICAgIC5jb25jYXRBbGwoKVxuICAgICAgLm1hcChwYXlsb2FkID0+ICh7dHlwZTpMT0FEX01FVFJJQ1NfU1VDQ0VTUywgcGF5bG9hZCB9KSk7XG4gICAgICBcbmV4cG9ydCBkZWZhdWx0IHsgbG9hZEdhdGV3YXksIGxvYWRQYXRoLCBsb2FkTWV0cmljcywgbG9hZExhc3RQYXRoIH07Il19